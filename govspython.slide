#+theme=black
#+closingMessage=Thanks and let's GO!

Go vs. Python

Dmytro Grendach
Nokia

[[http://github.com/grendach/GOvsPython][github.com/grendach/GOvsPython]]


* Agenda
.image images/golang_vs_python.jpg 150 800
1. Who is Who
2. Hello World
3. Lists(slices)
4. Dictionaries(maps)
5. Loops
6. Error handling
7. Pointers
9. Interface
10. Struct
9. Web server
10.

* Who is who: Python
 The Zen of Python:
 - Beautiful is better than ugly.
 - Explicit is better than implicit.
 - Simple is better than complex.
 - Complex is better than complicated.
 - Flat is better than nested.
 - Sparse is better than dense.
.image images/python.png 200 200

* Who is who: Go
 Go target is to make programmer's life easier, get things done:
 - Static typing
 - Consistent standard library
 - Go is object oriented
 - Type-safe and memory-safe: ointers is used in Go, but pointer-arithmetic is not possible
 - Struct
 - Goroutines
 - Easy deployment system (go install)
 - Self-documenting (and well-documented)
 - Free and Open Source (BSD licensed)
.image images/strongGopher.jpg 200 200



* Python vs Go
.image images/fight.jpg
Let the battle begin...


* Hello world in Python: 
.code code/hello.py

* Hello world in Go: 
.play code/hello.go


* Lists in Python:
.code code/lists.py 

* Lists (slices) in Go:
.play code/lists.go

* Dictionaries in Python:
.code code/dict.py

* Dictionaries in Go it's Map!
.play code/dict.go

* Loop in Python:
.code code/loop.py

* Loop in Go
.play code/loop.go

* Error handling in Python:
Error handling in Python is done through the use of exceptions.

.code code/exception.py


* Error handling in Go:

Go doesn’t have exceptions, so it doesn’t have try…catch or anything similar. 

There are two common methods for handling errors in Go:
  - panic
  - multiple return values

.play code/exception.go

* Pointers in Python:
Some text will be here

* Pointers in Go:
Go has pointers. A pointer holds the memory address of a value.

.play code/pointers.go

* Simple web server in Python:
 put here simple python web server

* Simple web server in Go:
.play code/web.go
