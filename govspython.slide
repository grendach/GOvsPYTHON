#+theme=black

Go vs. Python

Dmytro Grendach
Nokia

[[http://github.com/grendach/GOvsPython]]


* Agenda
.image images/golang_vs_python.jpg 100 800
1. Who is Who
2. Hello World
3. Main differences:
  - Lists(slices)
  - Dictionaries(maps)
  - Loops
  - Error handling
  - Other differences
4. What is written in Python and Go
5. Q&A

* Who is who: Python

- Created by *Guido* *van* *Rossum*  in 1991.

- Python is dynamicly typed, interpreter language 

- Use whitespace for indentation

- Has 33 keywords (`class`, `def`, `for`, `if`, `while`, etc.)

 The Zen of Python:
 - Beautiful is better than ugly.
 - Explicit is better than implicit.
 - Simple is better than complex.
 - Complex is better than complicated.
 - Flat is better than nested.
.image images/python.png 100 100


* Who is who: Go

- Created by Rob Pike , Robert Griesemer and Ken Thompson in 2009
- Go is a statically typed, compiled language
- Built in `fmt` package makes code formate for you
- Go has 25 kyewords (`go`, `goto`, `chan`, `func`, `for`, `if`, etc. )
  
The designers wanted to resolve common criticisms of other languages, while retaining many of their useful characteristics:

  - Statically typed and efficient (like C++ or Java)
  - Productive and easy to use (like Python or JavaScript)[18]
  - Supporting integrated development environments, but not requiring them
  - Enabling high-performance networking and multiprocessing
.image images/strongGopher.jpg 100 100



* Python vs Go
.image images/begin.gif 350 500
Let the battle begin...


* Hello world in Python: 
.code code/hello.py

* Hello world in Go: 
.play code/hello.go


* Main differences
- Lists(slices)
- Dictionaries(maps)
- Loops
- Error handling
- Pointers
- Channell and gorutine
- Inheritance
- Web services

* List in Python
.code code/lists.py 

* List (slices) in Go
.play code/lists.go

* Dictionary in Python
.code code/dict.py

* Dictionary in Go it's Map!
.play code/dict.go

* Loop in Python:
.code code/loop.py

* Loop in Go
.play code/loop.go

* Error handling in Python:
Error handling in Python is done through the use of exceptions.

.code code/exception.py


* Error handling in Go:

Go doesn’t have exceptions, so it doesn’t have try…catch.
Each time you need to check for error manually

There are two common methods for handling errors in Go:
  - panic
  - multiple return values

.play code/exception.go

* Pointers in Python:
Some text will be here

* Pointers in Go:
Go has pointers. A pointer holds the memory address of a value.

.play code/pointers.go


* Channel & Goroutine

*Channels* are the pipes that connect concurrent *goroutines*.
You can send values into channels from one *goroutine* and receive those values into another *goroutine*.

.play code/channel.go

* Inheritance in Python:

For *inheritance* Python use *base* (parent) and *sub* (child) classes.
*Base* class create a pattern out of which *sub*, child can be based on.

.code code/inheritance.py


* Inheritance in Go:

Go is unique from a lot of object-oriented languages in that it doesn’t have classes. 
Instead, Go has two awesome features: *interface* and *struct*.

*Interfaces*:
 - You don’t explicitly say a data type implements an interface;
 - Your data types must implement all of the methods that the interface defines;
 - Compiler checks to see if assignments to variables of the interface type are valid.

*Struct*:
 - It's a sequence of named elements, called fields, each of which has a name and a type;
 - Field names may be specified explicitly (IdentifierList) or implicitly (EmbeddedField);
 - Within a struct, non-blank field names must be unique.


* Inheritance in Go:
.code code/inheritance.go


* Python vs Go
.image images/finish.gif 350 500

End the winner is...
