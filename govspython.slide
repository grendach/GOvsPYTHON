#+theme=black
#+closingMessage=Thanks and let's GO!

Go vs. Python

Dmytro Grendach
Nokia

[[http://github.com/grendach/GOvsPython][github.com/grendach/GOvsPython]]


* Agenda
.image images/golang_vs_python.jpg 150 800
1. Who is Who
2. Hello World
3. Lists(slices)
4. Dictionaries(maps)
5. Loops
8. Range
9. Switch
10.

* Who is Who
What is Go
What is Python

* The Zen of Python
 - Beautiful is better than ugly.
 - Explicit is better than implicit.
 - Simple is better than complex.
 - Complex is better than complicated.
 - Flat is better than nested.
 - Sparse is better than dense.
 - Readability counts.
 - Special cases aren't special enough to break the rules.
 - Although practicality beats purity.
 - Errors should never pass silently.
 - Unless explicitly silenced.
 - In the face of ambiguity, refuse the temptation to guess.
 - There should be one-- and preferably only one --obvious way to do it.
 - Although that way may not be obvious at first unless you're Dutch.
 - Now is better than never.
 - Although never is often better than *right* now.
 - If the implementation is hard to explain, it's a bad idea.
 - If the implementation is easy to explain, it may be a good idea.
 - Namespaces are one honking great idea -- let's do more of those!

* Go features
 - Concurrency
 - Simplicity and Consistency
 - Go is object oriented
 - The Compiler.
 - Pointers.

Go target is to make programmer's life easier, get things done

* Python vs Go
.image images/fight.jpg
Let the battle begin...


* Hello world in Python: 
.code code/hello.py

* Hello world in Go: 
.play code/hello.go


* Lists in Python:
.code code/lists.py 

* Lists (slices) in Go:
.play code/lists.go

* Dictionaries in Python:
.code code/dict.py

* Map in Go:
.play code/dict.go

* Loop in Python:
.code code/loop.py

* Loop in Go
.play code/loop.go

* Exceptions in Python:

* Exceptions in Go:

                             No in Go

